<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Es5 on coldriver的技术博客</title>
    <link>https://chongg039.cn/tags/es5/index.xml</link>
    <description>Recent content in Es5 on coldriver的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="https://chongg039.cn/tags/es5/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>说说es5中的闭包</title>
      <link>https://chongg039.cn/blog/%E8%AF%B4%E8%AF%B4es5%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/</link>
      <pubDate>Mon, 18 Apr 2016 19:26:22 -0700</pubDate>
      
      <guid>https://chongg039.cn/blog/%E8%AF%B4%E8%AF%B4es5%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;匿名函数&lt;/strong&gt;：下面是最常见的一种&lt;strong&gt;函数表达式&lt;/strong&gt;的书写形式
&lt;code&gt;
var functionName = function(arg0, arg1, arg2){
//函数体
}
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;即：创建一个函数，并将其复制给变量&lt;code&gt;functionName&lt;/code&gt;，这种情况下创建的函数叫做匿名函数(anonymous function)，&lt;strong&gt;因为&lt;/strong&gt;&lt;code&gt;function&lt;/code&gt;&lt;strong&gt;后面没有标识符&lt;/strong&gt;，其&lt;code&gt;name&lt;/code&gt;属性是空字符串。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;函数表达式使用前必须先赋值，与函数声明的&lt;strong&gt;函数声明提升&lt;/strong&gt;不一致,关键是理解函数声明和函数表达式的区别&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;闭包&lt;/strong&gt;：有权访问另一个函数作用域中的变量的函数。创建闭包常用&lt;strong&gt;在一个函数内部创建另一个函数&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;闭包就是在全局作用域链中，某个位置想要访问函数只能从这一级一层层&lt;strong&gt;向上&lt;/strong&gt;为优先级访问，而&lt;strong&gt;不能访问该位置下创建的函数&lt;/strong&gt;。
一般来讲函数执行完毕后，局部活动对象就会被销毁，内存中仅仅保留全局作用域。但闭包不同。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在一个函数内部定义一个函数会将包含的函数（即外部函数）的活动对象添加到他的作用域链中。就是说，某一个函数内部定义的匿名函数的作用域链中，实际上会包含外部函数（即定义这个匿名函数的函数）的活动对象&amp;mdash;&amp;ndash;&amp;gt;所以匿名函数从定义它的函数中返回后，匿名函数的作用域链被初始化为包含在定义它的函数的活动对象和全局变量对象&amp;mdash;&amp;mdash;&amp;gt;匿名函数就可以访问在定义它的函数中的所有变量&amp;mdash;&amp;mdash;&amp;ndash;&amp;gt;更重要的是，定义他的函数在执行完毕后其活动对象不会被销毁（&lt;strong&gt;因为匿名函数的作用域链仍在引用这个活动对象&lt;/strong&gt;），即 即使定义它的函数返回后，其执行环境的作用域链被销毁了，但活动对象仍在内存中&amp;mdash;&amp;mdash;&amp;mdash;-&amp;gt;因此，&lt;strong&gt;直到匿名函数被销毁后，定义它的函数的活动对象才会被销毁&lt;/strong&gt;
&lt;img src=&#34;https://c1.staticflickr.com/1/579/33457488141_24d2d58c5e_b.jpg&#34; alt=&#34;closure&#34; /&gt;
&amp;gt; 解除对匿名函数的引用（来释放内存）
(定义匿名函数的函数名)&lt;code&gt;functionName = null&lt;/code&gt;;
解除函数的引用，即通知垃圾回收例程将其清除
随着匿名函数作用域链被销毁，其他作用域（除了全局）也可安全销毁&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;闭包会携带它函数的作用域，因此会比其他函数占用更多内存，&lt;strong&gt;过度使用闭包会导致内存占用过多&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;注意这种作用域链机制带来的一个&lt;strong&gt;副作用：闭包只能取得包含函数中的任何变量的最后一个值。&lt;/strong&gt;
&amp;gt; （因为   闭包保存的是整个变量对象而不是某个特殊变量）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Closure Example&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;

//下面这个函数
            function createFunctions(){
                var result = new Array();
                
                
                for (var i=0; i &amp;lt; 10; i++){
                    result[i] = function(){
                        return i;
                    };
                }
                
                return result;
            }
//上面这个函数

            var funcs = createFunctions();
            
            //every function outputs 10
            for (var i=0; i &amp;lt; funcs.length; i++){
                document.write(funcs[i]() + &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;);
            }

        &amp;lt;/script&amp;gt;
     
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面这个函数理应返回一个函数数组，每个函数都返回自己索引值（0~9）。&lt;strong&gt;但是！&lt;/strong&gt;因为每个函数的作用域链都保存着&lt;code&gt;createFunctions()&lt;/code&gt;函数的活动对象，所以&lt;strong&gt;他们引用的是同一个变量&lt;/strong&gt;&lt;code&gt;i&lt;/code&gt;。&lt;strong&gt;当&lt;/strong&gt;&lt;code&gt;createFunctions()&lt;/code&gt;&lt;strong&gt;函数返回后，得到变量&lt;/strong&gt;&lt;code&gt;i&lt;/code&gt;&lt;strong&gt;的值为10。&lt;/strong&gt;此时，&lt;strong&gt;每个函数都引用着保存变量&lt;/strong&gt;&lt;code&gt;i&lt;/code&gt;&lt;strong&gt;的同一个变量对象，所以每个函数内部的&lt;/strong&gt;&lt;code&gt;i&lt;/code&gt;&lt;strong&gt;值都为10。&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;下面通过创建另一个匿名函数强制让闭包行为符合预期&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Closure Example 2&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;

//下面这个函数        
            function createFunctions(){
                var result = new Array();
                
                for (var i=0; i &amp;lt; 10; i++){
                    result[i] = function(num){
                        return function(){      //这部分
                            return num;
                        };
                    }(i);
                }
                
                return result;
            }
//上面这个函数
            
            var funcs = createFunctions();
            
            //every function outputs 10
            for (var i=0; i &amp;lt; funcs.length; i++){
                document.write(funcs[i]() + &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;);
            }

        &amp;lt;/script&amp;gt;
     
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里并没有直接把闭包赋值给数组，而是&lt;strong&gt;通过定义一个匿名函数&lt;/strong&gt;，并&lt;strong&gt;将立即执行该匿名函数的结果赋值给数组&lt;/strong&gt;。匿名函数中的参数&lt;code&gt;num&lt;/code&gt;，就是最终函数要返回的值。
调用每个匿名函数时传入变量&lt;code&gt;i&lt;/code&gt;，因为&lt;strong&gt;参数是按值传递，所以会将变量i的当前值复制给参数&lt;/strong&gt;&lt;code&gt;num&lt;/code&gt;。而在&lt;strong&gt;这个匿名函数内部，又创建了一个访问&lt;/strong&gt;&lt;code&gt;num&lt;/code&gt;&lt;strong&gt;的闭包&lt;/strong&gt;。因此，&lt;code&gt;result&lt;/code&gt;数组中&lt;strong&gt;每个函数都有各自&lt;/strong&gt;&lt;code&gt;num&lt;/code&gt;&lt;strong&gt;的副本&lt;/strong&gt;，便能返回各自不同的数值。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>